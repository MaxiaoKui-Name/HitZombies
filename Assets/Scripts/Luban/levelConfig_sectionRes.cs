
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class levelConfig_sectionRes : Luban.BeanBase
{
    public levelConfig_sectionRes(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { if(!_buf["name"].IsString) { throw new SerializationException(); }  Name = _buf["name"]; }
        { if(!_buf["resource"].IsString) { throw new SerializationException(); }  Resource = _buf["resource"]; }
        { var __json0 = _buf["weapon"]; if(!__json0.IsArray) { throw new SerializationException(); } Weapon = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Weapon.Add(__v0); }   }
        { var __json0 = _buf["map"]; if(!__json0.IsArray) { throw new SerializationException(); } Map = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Map.Add(__v0); }   }
        { var __json0 = _buf["lv"]; if(!__json0.IsArray) { throw new SerializationException(); } Lv = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Lv.Add(__v0); }   }
        { var __json0 = _buf["door"]; if(!__json0.IsArray) { throw new SerializationException(); } Door = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Door.Add(__v0); }   }
        { if(!_buf["topic"].IsNumber) { throw new SerializationException(); }  Topic = _buf["topic"]; }
        { if(!_buf["provocation"].IsNumber) { throw new SerializationException(); }  Provocation = _buf["provocation"]; }
        { if(!_buf["reply"].IsNumber) { throw new SerializationException(); }  Reply = _buf["reply"]; }
        { if(!_buf["sectionDesc"].IsString) { throw new SerializationException(); }  SectionDesc = _buf["sectionDesc"]; }
    }

    public static levelConfig_sectionRes DeserializelevelConfig_sectionRes(JSONNode _buf)
    {
        return new levelConfig_sectionRes(_buf);
    }

    /// <summary>
    /// 配置id
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 名称
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 背景
    /// </summary>
    public readonly string Resource;
    /// <summary>
    /// 本关可使用的武器
    /// </summary>
    public readonly System.Collections.Generic.List<int> Weapon;
    /// <summary>
    /// 怪物波次
    /// </summary>
    public readonly System.Collections.Generic.List<int> Map;
    /// <summary>
    /// 怪物体质等级
    /// </summary>
    public readonly System.Collections.Generic.List<int> Lv;
    /// <summary>
    /// 增益波次读DoorRes
    /// </summary>
    public readonly System.Collections.Generic.List<int> Door;
    /// <summary>
    /// 开局对话内容
    /// </summary>
    public readonly int Topic;
    /// <summary>
    /// 对战BOSS前对话内容
    /// </summary>
    public readonly int Provocation;
    /// <summary>
    /// 对战BOSS后对话内容
    /// </summary>
    public readonly int Reply;
    /// <summary>
    /// 关卡描述
    /// </summary>
    public readonly string SectionDesc;
   
    public const int __ID__ = 1534152052;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "resource:" + Resource + ","
        + "weapon:" + Luban.StringUtil.CollectionToString(Weapon) + ","
        + "map:" + Luban.StringUtil.CollectionToString(Map) + ","
        + "lv:" + Luban.StringUtil.CollectionToString(Lv) + ","
        + "door:" + Luban.StringUtil.CollectionToString(Door) + ","
        + "topic:" + Topic + ","
        + "provocation:" + Provocation + ","
        + "reply:" + Reply + ","
        + "sectionDesc:" + SectionDesc + ","
        + "}";
    }
}

}

