
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class levelConfig_DoorTypeRes : Luban.BeanBase
{
    public levelConfig_DoorTypeRes(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { if(!_buf["big"].IsNumber) { throw new SerializationException(); }  Big = _buf["big"]; }
        { var __json0 = _buf["buffID"]; if(!__json0.IsArray) { throw new SerializationException(); } BuffID = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  BuffID.Add(__v0); }   }
        { var __json0 = _buf["buffweights"]; if(!__json0.IsArray) { throw new SerializationException(); } Buffweights = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Buffweights.Add(__v0); }   }
        { var __json0 = _buf["debuff"]; if(!__json0.IsArray) { throw new SerializationException(); } Debuff = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Debuff.Add(__v0); }   }
        { var __json0 = _buf["debuffweights"]; if(!__json0.IsArray) { throw new SerializationException(); } Debuffweights = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Debuffweights.Add(__v0); }   }
        { if(!_buf["delay"].IsNumber) { throw new SerializationException(); }  Delay = _buf["delay"]; }
        { if(!_buf["interval"].IsNumber) { throw new SerializationException(); }  Interval = _buf["interval"]; }
        { if(!_buf["random"].IsNumber) { throw new SerializationException(); }  Random = _buf["random"]; }
        { if(!_buf["note1"].IsString) { throw new SerializationException(); }  Note1 = _buf["note1"]; }
        { if(!_buf["note2"].IsString) { throw new SerializationException(); }  Note2 = _buf["note2"]; }
    }

    public static levelConfig_DoorTypeRes DeserializelevelConfig_DoorTypeRes(JSONNode _buf)
    {
        return new levelConfig_DoorTypeRes(_buf);
    }

    /// <summary>
    /// 配置id
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 1是BUFF与DEBUFF，10是强力门
    /// </summary>
    public readonly int Big;
    /// <summary>
    /// BUFF（技能表中的BUFF表）
    /// </summary>
    public readonly System.Collections.Generic.List<int> BuffID;
    /// <summary>
    /// BUFF（技能表中的BUFF表）
    /// </summary>
    public readonly System.Collections.Generic.List<int> Buffweights;
    /// <summary>
    /// DEBUFF
    /// </summary>
    public readonly System.Collections.Generic.List<int> Debuff;
    /// <summary>
    /// DEBUFF
    /// </summary>
    public readonly System.Collections.Generic.List<int> Debuffweights;
    /// <summary>
    /// 出生延迟（ms）
    /// </summary>
    public readonly int Delay;
    /// <summary>
    /// 出生间隔（ms）
    /// </summary>
    public readonly int Interval;
    /// <summary>
    /// 出生延迟上限到本体摆动范围，摆动不影响下一级触发时机(ms)
    /// </summary>
    public readonly int Random;
    /// <summary>
    /// 备注
    /// </summary>
    public readonly string Note1;
    /// <summary>
    /// 备注2
    /// </summary>
    public readonly string Note2;
   
    public const int __ID__ = 626980991;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "big:" + Big + ","
        + "buffID:" + Luban.StringUtil.CollectionToString(BuffID) + ","
        + "buffweights:" + Luban.StringUtil.CollectionToString(Buffweights) + ","
        + "debuff:" + Luban.StringUtil.CollectionToString(Debuff) + ","
        + "debuffweights:" + Luban.StringUtil.CollectionToString(Debuffweights) + ","
        + "delay:" + Delay + ","
        + "interval:" + Interval + ","
        + "random:" + Random + ","
        + "note1:" + Note1 + ","
        + "note2:" + Note2 + ","
        + "}";
    }
}

}

